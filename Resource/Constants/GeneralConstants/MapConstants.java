package Resource.Constants.GeneralConstants;

import Model.Map.AxialTransform;
import Model.Map.MapGenerationKeywords;

/**
 *
 */
public interface MapConstants
{

    /*
     * -----------------------Start-Gen_Args----------------------------
     */
    /**
     * MapGenerationKeywords that are currently in use. First mus always be the
     * shape, second the size and third wether or not the map is randomized.
     */
    public static final MapGenerationKeywords[] DEFAULT_MAP_GEN_ARGS =
      {
        MapGenerationKeywords.hexagon, MapGenerationKeywords.medium,
        //   MapGenerationKeywords.random
        MapGenerationKeywords.noRandom
      };

    /**
     * When generating the map, each tile recieves a pseudorandom value between
     * 0 and 1. if the value is above DEFAULT_OBSTACLE_AMOUNT, the tile will
     * have an obstacle.
     */
    public static final float DEFAULT_OBSTACLE_AMOUNT = 0.80f;

    /**
     * When generating the map, each tile recieves a pseudorandom value between
     * 0 and 1. if the value is below DEFAULT_CRYSTAL_AMOUNT, the tile will have
     * a crystal.
     */
    public static final float DEFAULT_CRYSTAL_AMOUNT = 0.20f;

    /**
     * This makes the map height more or less rough by increasing or decreasing
     * the noise cell scale relative to the maps hexes. Recommended to be
     * between 0.3 and 0.8
     */
    public static final float TERRAIN_NOISE_SCALE = 0.4f;

    /**
     * See terrain_noise_scale but with obstacles and crystals. Recommended to
     * be between 0.8 and 1.0
     */
    public static final float FEATURE_NOISE_SCALE = 1.0f;

    /**
     * If the MapGenerationKeywords are invalid, use this map instead.
     */
    public static final String DEFAULT_MAP = "hexagon_medium";

    /**
     * 
     */
    public static final String MAP_NAME_SMALL = "hexagon_small";

    /**
     * 
     */
    public static final String MAP_NAME_MEDIUM = "hexagon_medium";

    /**
     * 
     */
    public static final String MAP_NAME_LARGE = "hexagon_large";

    /**
     * 
     */
    public static final String TILE_OVERLAP = "Tile Overlap";

    /**
     * 
     */
    public static final String MAP_DATAFORMAT = ".map";

    /**
     * 
     */
    public static final String FALLTHROUGH = "fallthrough";

    /*
     * -----------------------end-Gen_Args-------------------------------------
     */
 /*
     * -----------------------Start-ints-----------------------------------
     */
    /**
     * Minimum height a tile generated by the mapGenerator will have.
     */
    public static final int MIN_TILE_HEIGHT = 1;

    /**
     * Maximum height a tile generated by the mapGenerator will have. According
     * to the task this will always be 3.
     */
    public static final int MAX_TILE_HEIGHT = 3;

    /**
     * Name outdated. Length of the edges of a Rhombus shaped map. Diameter of a
     * Hexagon shaped map. Named after use in Hexagonal maps because they will
     * likely be used more frequently ingame.
     */
    public static final int DIAMETER = 7;

    /**
     * How many Axial-Coordinates a Tile has. This must not be changed.
     */
    public final static int AMOUNT_OF_AXIAL_COORDINATES = 2;

    /**
     * How many Cube-Coordinates a Tile has. This must not be changed.
     */
    public final static int AMOUNT_OF_CUBE_COORDINATES = 3;

    /**
     * How many FloatCube-Coordinates a Tile has. This must not be changed.
     */
    public final static int AMOUNT_OF_FLOAT_CUBE_COORDINATES = 3;

    /**
     *
     */
    public final static int COORDINATE_0 = 0;

    /**
     *
     */
    public final static int COORDINATE_1 = 1;

    /**
     *
     */
    public final static int COORDINATE_2 = 2;

    /**
     *
     */
    public final static int DIVIDE_BY_TWO = 2;

    /**
     *
     */
    public final static int SHORT_DEFAULT = 512;

    /**
     * A Tile's default priority in pathfinding tasks.
     */
    public final static int DEFAULT_PRIORITY = 0;

    /**
     * A Tile's default movement point cost. Currently no other movement point
     * cost is used but the option exists.
     */
    public final static int DEFAULT_MOVEMENT_POINT_COST = 1;

    /**
     * Factor by which the MapConstants.DIAMETER is increased on larger map
     * sizes.
     */
    public static final float[] SIZE_MODIFIERS =
      {
        1f, 1.6f, 2.2f
      };

    /*
     * -----------------------end-ints-------------------------------------
     */
 /*
     * -----------------------Start-AxialTransforms----------------------------
     */
    /**
     * The Directions of the AxialTransform. Adding each of these to any one
     * AxialTransform once will return all adjacent spaces.
     */
    /**
     * Bot-Right.
     */
    public static final AxialTransform AXIAL_DIRECTION_0 = new AxialTransform(1, 0);

    /**
     * Bot-Left.
     */
    public static final AxialTransform AXIAL_DIRECTION_1 = new AxialTransform(1, -1);

    /**
     * Left
     */
    public static final AxialTransform AXIAL_DIRECTION_2 = new AxialTransform(0, -1);

    /**
     * Top-Left
     */
    public static final AxialTransform AXIAL_DIRECTION_3 = new AxialTransform(-1, 0);

    /**
     * Top-Right
     */
    public static final AxialTransform AXIAL_DIRECTION_4 = new AxialTransform(-1, 1);

    /**
     * Right.
     */
    public static final AxialTransform AXIAL_DIRECTION_5 = new AxialTransform(0, 1);

    /**
     * 0=Bot-Right. 1=Bot-Left. 2=Left. 3=Top-Left. 4=Top-Right. 5=Right.
     */
    public static final AxialTransform[] AXIAL_DIRECTIONS =
      {
        AXIAL_DIRECTION_0, AXIAL_DIRECTION_1, AXIAL_DIRECTION_2, 
          AXIAL_DIRECTION_3, AXIAL_DIRECTION_4, AXIAL_DIRECTION_5,
      };

    /**
     * 
     */
    public static final int TO_HASH = 1000;
    
    /*
     * -----------------------End---AxialTransforms----------------------------
     */
}
